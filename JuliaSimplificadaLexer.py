# Generated from JuliaSimplificadaLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,218,
        8,35,1,36,4,36,221,8,36,11,36,12,36,222,1,37,4,37,226,8,37,11,37,
        12,37,227,1,37,1,37,4,37,232,8,37,11,37,12,37,233,1,38,1,38,1,38,
        1,38,5,38,240,8,38,10,38,12,38,243,9,38,1,38,1,38,1,38,1,38,1,38,
        1,38,5,38,251,8,38,10,38,12,38,254,9,38,1,38,1,38,1,38,3,38,259,
        8,38,1,39,1,39,5,39,263,8,39,10,39,12,39,266,9,39,1,40,4,40,269,
        8,40,11,40,12,40,270,1,40,1,40,1,41,1,41,5,41,277,8,41,10,41,12,
        41,280,9,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,288,8,42,10,42,12,
        42,291,9,42,1,42,1,42,1,42,1,42,1,42,2,252,289,0,43,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,1,0,6,1,0,48,57,2,0,34,34,92,
        92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,1,87,1,0,0,0,3,96,1,0,0,0,5,100,1,0,0,0,7,107,1,0,0,0,9,110,1,
        0,0,0,11,115,1,0,0,0,13,122,1,0,0,0,15,126,1,0,0,0,17,129,1,0,0,
        0,19,135,1,0,0,0,21,139,1,0,0,0,23,145,1,0,0,0,25,152,1,0,0,0,27,
        157,1,0,0,0,29,159,1,0,0,0,31,161,1,0,0,0,33,163,1,0,0,0,35,165,
        1,0,0,0,37,168,1,0,0,0,39,171,1,0,0,0,41,173,1,0,0,0,43,175,1,0,
        0,0,45,178,1,0,0,0,47,181,1,0,0,0,49,184,1,0,0,0,51,187,1,0,0,0,
        53,189,1,0,0,0,55,191,1,0,0,0,57,194,1,0,0,0,59,196,1,0,0,0,61,198,
        1,0,0,0,63,200,1,0,0,0,65,202,1,0,0,0,67,204,1,0,0,0,69,206,1,0,
        0,0,71,217,1,0,0,0,73,220,1,0,0,0,75,225,1,0,0,0,77,258,1,0,0,0,
        79,260,1,0,0,0,81,268,1,0,0,0,83,274,1,0,0,0,85,283,1,0,0,0,87,88,
        5,102,0,0,88,89,5,117,0,0,89,90,5,110,0,0,90,91,5,99,0,0,91,92,5,
        116,0,0,92,93,5,105,0,0,93,94,5,111,0,0,94,95,5,110,0,0,95,2,1,0,
        0,0,96,97,5,101,0,0,97,98,5,110,0,0,98,99,5,100,0,0,99,4,1,0,0,0,
        100,101,5,114,0,0,101,102,5,101,0,0,102,103,5,116,0,0,103,104,5,
        117,0,0,104,105,5,114,0,0,105,106,5,110,0,0,106,6,1,0,0,0,107,108,
        5,105,0,0,108,109,5,102,0,0,109,8,1,0,0,0,110,111,5,101,0,0,111,
        112,5,108,0,0,112,113,5,115,0,0,113,114,5,101,0,0,114,10,1,0,0,0,
        115,116,5,101,0,0,116,117,5,108,0,0,117,118,5,115,0,0,118,119,5,
        101,0,0,119,120,5,105,0,0,120,121,5,102,0,0,121,12,1,0,0,0,122,123,
        5,102,0,0,123,124,5,111,0,0,124,125,5,114,0,0,125,14,1,0,0,0,126,
        127,5,105,0,0,127,128,5,110,0,0,128,16,1,0,0,0,129,130,5,119,0,0,
        130,131,5,104,0,0,131,132,5,105,0,0,132,133,5,108,0,0,133,134,5,
        101,0,0,134,18,1,0,0,0,135,136,5,73,0,0,136,137,5,110,0,0,137,138,
        5,116,0,0,138,20,1,0,0,0,139,140,5,70,0,0,140,141,5,108,0,0,141,
        142,5,111,0,0,142,143,5,97,0,0,143,144,5,116,0,0,144,22,1,0,0,0,
        145,146,5,83,0,0,146,147,5,116,0,0,147,148,5,114,0,0,148,149,5,105,
        0,0,149,150,5,110,0,0,150,151,5,103,0,0,151,24,1,0,0,0,152,153,5,
        66,0,0,153,154,5,111,0,0,154,155,5,111,0,0,155,156,5,108,0,0,156,
        26,1,0,0,0,157,158,5,43,0,0,158,28,1,0,0,0,159,160,5,45,0,0,160,
        30,1,0,0,0,161,162,5,42,0,0,162,32,1,0,0,0,163,164,5,47,0,0,164,
        34,1,0,0,0,165,166,5,61,0,0,166,167,5,61,0,0,167,36,1,0,0,0,168,
        169,5,33,0,0,169,170,5,61,0,0,170,38,1,0,0,0,171,172,5,60,0,0,172,
        40,1,0,0,0,173,174,5,62,0,0,174,42,1,0,0,0,175,176,5,60,0,0,176,
        177,5,61,0,0,177,44,1,0,0,0,178,179,5,62,0,0,179,180,5,61,0,0,180,
        46,1,0,0,0,181,182,5,38,0,0,182,183,5,38,0,0,183,48,1,0,0,0,184,
        185,5,124,0,0,185,186,5,124,0,0,186,50,1,0,0,0,187,188,5,33,0,0,
        188,52,1,0,0,0,189,190,5,61,0,0,190,54,1,0,0,0,191,192,5,58,0,0,
        192,193,5,58,0,0,193,56,1,0,0,0,194,195,5,58,0,0,195,58,1,0,0,0,
        196,197,5,44,0,0,197,60,1,0,0,0,198,199,5,40,0,0,199,62,1,0,0,0,
        200,201,5,41,0,0,201,64,1,0,0,0,202,203,5,91,0,0,203,66,1,0,0,0,
        204,205,5,93,0,0,205,68,1,0,0,0,206,207,5,59,0,0,207,70,1,0,0,0,
        208,209,5,116,0,0,209,210,5,114,0,0,210,211,5,117,0,0,211,218,5,
        101,0,0,212,213,5,102,0,0,213,214,5,97,0,0,214,215,5,108,0,0,215,
        216,5,115,0,0,216,218,5,101,0,0,217,208,1,0,0,0,217,212,1,0,0,0,
        218,72,1,0,0,0,219,221,7,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,
        220,1,0,0,0,222,223,1,0,0,0,223,74,1,0,0,0,224,226,7,0,0,0,225,224,
        1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,229,
        1,0,0,0,229,231,5,46,0,0,230,232,7,0,0,0,231,230,1,0,0,0,232,233,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,76,1,0,0,0,235,241,5,
        34,0,0,236,240,8,1,0,0,237,238,5,92,0,0,238,240,9,0,0,0,239,236,
        1,0,0,0,239,237,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,
        1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,259,5,34,0,0,245,246,
        5,34,0,0,246,247,5,34,0,0,247,248,5,34,0,0,248,252,1,0,0,0,249,251,
        9,0,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,253,1,0,0,0,252,250,
        1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,5,34,0,0,256,257,
        5,34,0,0,257,259,5,34,0,0,258,235,1,0,0,0,258,245,1,0,0,0,259,78,
        1,0,0,0,260,264,7,2,0,0,261,263,7,3,0,0,262,261,1,0,0,0,263,266,
        1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,80,1,0,0,0,266,264,1,
        0,0,0,267,269,7,4,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,
        0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,6,40,0,0,273,82,1,
        0,0,0,274,278,5,35,0,0,275,277,8,5,0,0,276,275,1,0,0,0,277,280,1,
        0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,
        0,0,0,281,282,6,41,0,0,282,84,1,0,0,0,283,284,5,35,0,0,284,285,5,
        61,0,0,285,289,1,0,0,0,286,288,9,0,0,0,287,286,1,0,0,0,288,291,1,
        0,0,0,289,290,1,0,0,0,289,287,1,0,0,0,290,292,1,0,0,0,291,289,1,
        0,0,0,292,293,5,61,0,0,293,294,5,35,0,0,294,295,1,0,0,0,295,296,
        6,42,0,0,296,86,1,0,0,0,13,0,217,222,227,233,239,241,252,258,264,
        270,278,289,1,6,0,0
    ]

class JuliaSimplificadaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUNCTION = 1
    END = 2
    RETURN = 3
    IF = 4
    ELSE = 5
    ELSEIF = 6
    FOR = 7
    IN = 8
    WHILE = 9
    INT_TYPE = 10
    FLOAT_TYPE = 11
    STRING_TYPE = 12
    BOOL_TYPE = 13
    PLUS = 14
    MINUS = 15
    MULT = 16
    DIV = 17
    EQ = 18
    NEQ = 19
    LT = 20
    GT = 21
    LTE = 22
    GTE = 23
    AND = 24
    OR = 25
    NOT = 26
    ASSIGN = 27
    TYPE_ASSIGN = 28
    COLON = 29
    COMMA = 30
    LPAREN = 31
    RPAREN = 32
    LBRACKET = 33
    RBRACKET = 34
    SEMI = 35
    BOOL = 36
    INT = 37
    FLOAT = 38
    STRING = 39
    IDENTIFIER = 40
    WS = 41
    COMMENT = 42
    MULTILINE_COMMENT = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "'end'", "'return'", "'if'", "'else'", "'elseif'", 
            "'for'", "'in'", "'while'", "'Int'", "'Float'", "'String'", 
            "'Bool'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", "'='", "'::'", 
            "':'", "','", "'('", "')'", "'['", "']'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "FUNCTION", "END", "RETURN", "IF", "ELSE", "ELSEIF", "FOR", 
            "IN", "WHILE", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", "BOOL_TYPE", 
            "PLUS", "MINUS", "MULT", "DIV", "EQ", "NEQ", "LT", "GT", "LTE", 
            "GTE", "AND", "OR", "NOT", "ASSIGN", "TYPE_ASSIGN", "COLON", 
            "COMMA", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "SEMI", 
            "BOOL", "INT", "FLOAT", "STRING", "IDENTIFIER", "WS", "COMMENT", 
            "MULTILINE_COMMENT" ]

    ruleNames = [ "FUNCTION", "END", "RETURN", "IF", "ELSE", "ELSEIF", "FOR", 
                  "IN", "WHILE", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
                  "BOOL_TYPE", "PLUS", "MINUS", "MULT", "DIV", "EQ", "NEQ", 
                  "LT", "GT", "LTE", "GTE", "AND", "OR", "NOT", "ASSIGN", 
                  "TYPE_ASSIGN", "COLON", "COMMA", "LPAREN", "RPAREN", "LBRACKET", 
                  "RBRACKET", "SEMI", "BOOL", "INT", "FLOAT", "STRING", 
                  "IDENTIFIER", "WS", "COMMENT", "MULTILINE_COMMENT" ]

    grammarFileName = "JuliaSimplificadaLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


